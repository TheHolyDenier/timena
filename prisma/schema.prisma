// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid()) @map("_id")
  username     String    @unique
  email        String    @unique
  avatar       String?
  passwordHash String
  accessToken  String?   @unique
  expiresAt    DateTime? @map(name: "expires_at")
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  updatedAt    DateTime  @updatedAt @map(name: "updated_at")

  projectOnUser ProjectOnUser[] @relation("user")

  @@map(name: "users")
}

model Project {
  id         String   @id @default(cuid()) @map("_id")
  title      String
  summary    String?
  cover      String?
  isFavorite Boolean?

  createdById String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  elements      Element[]
  events        Event[]
  projectOnUser ProjectOnUser[] @relation("project")

  @@map(name: "projects")
}

model ProjectOnUser {
  id String @id @default(cuid()) @map("_id")

  createdById String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  user   User   @relation(name: "user", fields: [userId], references: [id])
  userId String

  project   Project @relation(name: "project", fields: [projectId], references: [id])
  projectId String

  @@map(name: "project-on-user")
}

model Element {
  id          String  @id @default(cuid()) @map("_id")
  name        String?
  description String?
  cover       String?

  isFavorite Boolean?
  exists     Boolean?
  type       String?

  createdById String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  elementsOnEvent           ElementOnEvent[]
  mainElementOnElement      ElementOnElement[] @relation("element")
  relatesToElementOnElement ElementOnElement[] @relation("relatesToElement")

  @@map(name: "elements")
}

model Event {
  id String @id @default(cuid())

  title       String?
  description String?
  cover       String?

  startDate String
  endDate   String?

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  createdById String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  elementOnEvent ElementOnEvent[]

  @@map(name: "events")
}

model ElementOnElement {
  id String @id @default(cuid()) @map("_id")

  createdById String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  element   Element @relation(name: "element", fields: [elementId], references: [id])
  elementId String

  relatesToElement   Element @relation(name: "relatesToElement", fields: [relatesToElementId], references: [id])
  relatesToElementId String

  @@map(name: "elements-on-elements")
}

model ElementOnEvent {
  id String @id @default(cuid()) @map("_id")

  createdById String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  element   Element @relation(fields: [elementId], references: [id])
  elementId String

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  @@map(name: "elements-on-events")
}
